{"ts":1342097248726,"silentsave":true,"restoring":false,"patch":[[]],"length":0}
{"contributors":[],"silentsave":false,"ts":1342097249630,"patch":[[{"diffs":[[1,"<!DOCTYPE HTML>\r\n<html lang=\"en-US\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n\t<title>Observer JS</title>\r\n\t<link href='http://fonts.googleapis.com/css?family=Actor' rel='stylesheet' type='text/css'>\r\n\t<style type=\"text/css\">\r\n\t\tbody{\r\n\t\t\tfont-family: 'Actor', sans-serif;\r\n\t\t}\r\n\t\t#dynamicblock{\r\n\t\t\tborder: 1px solid #999;\r\n\t\t\tpadding:10px;\r\n\t\t\twidth:400px;\r\n\t\t}\r\n\r\n\t\tpre{\r\n\t\t\tbackground-color: #F8F8F8;\r\n\t\t\tborder: 1px solid #CCC;\r\n\t\t\tfont-size: 13px;\r\n\t\t\tline-height: 19px;\r\n\t\t\toverflow: auto;\r\n\t\t\tpadding: 6px 10px;\r\n\t\t\tborder-radius: 3px;\r\n\t\t\tdisplay: block;\r\n\t\t}\r\n\t\tcode{\r\n\t\t\tfont-weight: bolder;\r\n\t\t}\r\n\t\tpre code{\r\n\t\t\tfont-size: 12px;\r\n\t\t\tfont-family: Consolas,Menlo,\"Liberation Mono\",Courier,monospace;\r\n\t\t\ttext-align: left;\r\n\t\t\tfont-weight: normal;\r\n\t\t}\r\n\t</style>\r\n</head>\r\n<body>\r\n\t<div id=\"container\">\r\n\t\t<div id=\"main\">\r\n\t\t\t<h1>Observer JS</h1>\r\n\t\t\t<p>A simple Observer pattern for your object model.</p>\r\n\r\n\t\t\t<h2>Simple Example</h2>\r\n\t\t\t<pre><code>var a = <span id=\"value_of_a\">10</span>;\r\nvar _a_observer = new Observable(\"a\", this, function(newVal){ \r\n\tdocument.getElementById('value_of_a').innerHTML = newVal;\r\n});</code></pre>\r\n\r\n\t\t\t<p>To check the variable value is observed, in the chrome console type <code>a = 100;</code>. You will see the <code>var a = 40;</code> is updated to <code>var a = 100;</code></p>\r\n\r\n\t\t\t<h2>More complex example</h2>\r\n\r\n\t\t\t<pre><code>var model = {\r\n  \"location\": { \"lat\": 0, \"lng\": 0  } ,\r\n  \"heading\": 123,\r\n  \"target\": { \"lat\": 0, \"lng\": 0 }\r\n};\r\n\r\nvar _locationObserver = new Observable(\"location\", model);\r\nvar _headingObserver = new Observable(\"heading\", model);\r\nvar _targetObserver = new Observable(\"target\", model);\r\n\r\n_locationObserver.addChangeListener(function(newVal, oldVal) {\r\n  console.log('_locationObserver.addChangeListener', newVal, oldVal);\r\n  alert('Location Updated');\r\n});\r\n\t\t</code></pre>\r\n\t<p>Now you can trigger the change event by updating the value of location, heading or target property inside model object. <code>Try model.location = {\"lat\": -44, \"lng\": 55.5}</code></p>\r\n\r\n\r\n\t</div>\r\n\t<script type=\"text/javascript\" src=\"observable.js\"></script>\r\n\t<script type=\"text/javascript\">\r\n   var model = {\r\n\t\t  \"location\": { \"lat\": 0, \"lng\": 0  } ,\r\n\t\t  \"heading\": 123,\r\n\t\t  \"target\": { \"lat\": 0, \"lng\": 0 }\r\n\t\t};\r\n\r\n\t\ta = 10;\r\n\r\n\t\tvar _locationObserver = new Observable(\"location\", model);\r\n\t\tvar _headingObserver = new Observable(\"heading\", model);\r\n\t\tvar _targetObserver = new Observable(\"target\", model);\r\n\r\n\t\tvar _a_observer = new Observable(\"a\", this, function(newVal){ \r\n\t\t\tdocument.getElementById('value_of_a').innerHTML = newVal;\r\n\t\t});\r\n\r\n\t\t_locationObserver.addChangeListener(function(newVal, oldVal) {\r\n\t\t  console.log('_locationObserver.addChangeListener', newVal, oldVal);\r\n\t\t  alert('Location Updated');\r\n\t\t});\r\n\r\n\t\t_a_observer.addChangeListener(function(newVal, oldVal) {\r\n\t\t\tconsole.log('_a_observer.addChangeListener', newVal, oldVal);\r\n\t\t});\r\n\t</script>\r\n</body>\r\n</html>"]],"start1":0,"start2":0,"length1":0,"length2":2961}]],"length":2961,"saved":false}
